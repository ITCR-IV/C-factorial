scope = "{", [EOL] , {loc | scope} , "}" , [EOL]; # When using this rule, it doesn't need to reach EOFF because it just evaluates everything inside global scope

loc = [ declaration | struct_definition | print_call | struct_declaration ] , ";", EOL; #loc = line of code, #EOL = end of line

declaration = type , ID , [ "=" , return_expression ] ; #interpreter has to check that type on left == type on right

return_expression = arithmetic | method_call | STRING | STRUCTACCESS | ID ; #check if ID is a number and if it is jump to arithmetic

struct_definition = "struct" , struct_scope , ID ;

struct_scope = "{", [EOL] , {struct_loc} , "}" ; 

struct_loc = [ declaration ] , ";" , EOL;

struct_declaration = STRUCTACCESS , "=" , return_expression ; #STRUCTACCESS has the format "ID.ID"

arithmetic = factor , { "+" | "-" | "*" | "/" , factor } ;

method_call = "getAddr" | "getValue" , "(" , ID | STRUCTACCESS, ")" ; #the variable passed has to be a refernce type

print_call = "print", "(" , return_expression ")" ;

factor = ID | number ; #ID has to refer to a previously defined int/float/double/long

number = [ "-" ] , INTEGER | DECIMAL ;

type = "int" | "long" | "char" | "float" | "double" | ("reference" , "<" , type , ">") | ID ; #ID has to refer to a previously defined struct

# all the predefined strings in here have to be found by the ID method

#These are the rules for interpreting one line at a time:

loc1 = ([ declaration | print_call | struct_declaration ] , ";", EOL) | ("{", EOL) | ("}", EOL) | struct_definition_open1 | EOFF; #Here it does reach EOFF because we never know when it's coming 

struct_loc1 = [ declaration | struct_definition_close1] , ";" , EOL ;

#struct_definition1  opens the struct definition and struct_definition2 closes it, the latter must only happen if inside a struct
struct_definition_open1 = "struct" , "{" ,  EOL ;

struct_definition_close1 = "}" , ID ;