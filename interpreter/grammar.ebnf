scope = "{", [EOL] , {loc | scope} , "}" , [EOL]; 

loc = [ declaration | struct_definition | print_call | struct_declaration ] , ";", EOL; #loc = line of code, #EOL = end of line

declaration = type , ID , [ "=" , return_expression ] ; #interpreter has to check that type on left == type on right

return_expression = arithmetic | method_call | STRING | STRUCTACCESS | ID ; #check if ID is a number and if it is jump to arithmetic

struct_definition = "struct" , struct_scope , ID ;

struct_loc = [ declaration ] , ";" , EOL;

struct_scope = "{", [EOL] , {struct_loc} , "}" ; 

struct_declaration = STRUCTACCESS , "=" , return_expression ; #STRUCTACCESS has the format "ID.ID"

arithmetic = factor , { "+" | "-" | "*" | "/" , factor } ;

method_call = "getAddr" | "getValue" , "(" , ID | STRUCTACCESS, ")" ;

print_call = "print", "(" , STRING , ")" ;

factor = ID | number ; #ID has to refer to a previously defined int/float/double/long

number = [ "-" ] , INTEGER | DECIMAL ;

type = "int" | "long" | "char" | "float" | "double" | ("reference" , "<" , type , ">") | ID ; #ID has to refer to a previously defined struct

# all the predefined strings in here have to be found by the ID method