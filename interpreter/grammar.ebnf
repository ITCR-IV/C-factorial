scope = "{" , {loc | scope} , "}" ; 

loc = [ declaration | struct | print_call | return_expression | struct_declaration ] , ";" ; #loc = line of code

declaration = type , ID , [ "=" , return_expression ] ; #interpreter has to check that type on left == type on right

return_expression = arithmetic | method_call | token | STRING | struct_access ;

struct = "struct" , struct_scope , ID ;

struct_loc = [ declaration ] , ";"

struct_scope = "{" , {struct_loc} , "}" ; 

struct_declaration = struct_access , "=" , return_expression ;

struct_access = ID , "." , ID ; # struct_access acceses an attribute of a struct

arithmetic = token , { "+" | "-" | "*" | "/" , token } ;

method_call = "getAddr" | "getValue" , "(" , ID | struct_access, ")" ;

print_call = "print", "(" , STRING , ")" ;

token = ID | number ; 

number = [ "-" ] , INTEGER , ["." , INTEGER] ;

type = "int" | "long" | "char" | "float" | "double" | ("reference" , "<" , type , ">") | ID ; #ID has to refer to a previously defined struct

# all the predefined strings in here have to be found by the ID method